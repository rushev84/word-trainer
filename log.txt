1. Создаём домен word-trainer.

2. Создаём файл index.php, через который будет осуществляться вся загрузка страниц, весь роутинг.

3. Устанавливаем композер локально:
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === '906a84df04cea2aa72f40b5f787e49f22d4c2f19492ac310e8cba5b96ac8b64115ac402c8cd292b8a03482574915d1a8') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"

3. Создаём файл composer.json и в нём прописываем следующее:
{
  "autoload": {
    "psr-4": {
      "App\\": "app"
    }
  }
}

4. Для автозагрузки нэймспэйсов пишем в терминале:
php composer.phar dump-autoload -o

5. Подключаем автозагрузку в файле index.php:
require_once __DIR__ . "/vendor/autoload.php";

6. Создаём папку App, в ней Services, в ней класс Router.php в пространстве имён App\Services. В файле пишем:
namespace App\Services;

class Router
{
    public static function hello()
    {
        echo 'hello';
    }
}

7. Подключаем класс Router в index.php:
use App\Services\Router;

8. Тестируем работу класса, вызывая статический метод hello():
Router::hello();

9. Создаём в классе Router статическую переменную list (массив) и статический метод page(), кот. будет нужен для инициализации загружаемых страниц.
    private static $list = [];

    public static function page($uri, $page_name)
    {
        self::$list[] = [
            "uri" => $uri,
            "page" => $page_name
        ];
    }

Метод принимает в себя $uri (то, что идёт после доменного имени) и $page_name (имя загружаемой страницы), после чего добавляет в $list массив из $uri и $page_name.

10. Создаём папку router, а в ней - routes.php, кот. будет отвечать за вызов методов из класса Router.
Для того, чтобы класс Router был видим, добавляем
use App\Services\Router;

11. Сделаем инициализацию домашней страницы:
Router::page('/', 'home');

12. Создадим эту домашнюю страницу, для этого создадим папку представлений views, в ней папку pages, а в ней - home.php.
Для теста добавим в неё:
echo 'this is home';

13. Создадим файл .htaccess для настройки apache-сервера. В файле будет следующий код:
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
AddDefaultCharset UTF-8
RewriteRule ^(.+)$ index.php?q=$1 [L,QSA]

В переменную q заносится всё, что идёт после доменного имени.

14. Добавим в класс Router статический метод enable() для того, чтобы активизировать все проинициализированные страницы, а в этом методе в переменную $query поместим всё из q:
        $query = $_GET['q'];

15. Подключим routes.php в файле index.php:
require_once "router/routes.php";

16. Сделаем тест: выведем $query и убедимся, что в неё действительно попадает то, что находится в адресной строке после доменного имени и слэша:
print_r($query);

17. Далее напишем логику метода enable(). Переберём в цикле весь лист инициализированных страниц и вызовем ту страницу, имя которой находится в ключе "page", после чего подгрузим нужную страницу и завершим выполнение кода:

        foreach (self::$list as $route) {
            if($route["uri"] === "/". $query){
                $page = $route['page'];
                require_once "views/pages/$page.php";
                die();
            }
        }

18. Создадим в папке views/pages заготовки страниц регистрации и авторизации и проинициализируем их в routes.php
Router::page('/login', 'login');
Router::page('/register', 'register');

19. Если пользователь ввёл неправильный адрес, то во время выполнения цикла не подгрузится никакая страница (не будет найдено совпадений по $uri), код продолжит выполняться дальше. Тут мы вызовем статический метод error():
self::error('404');

20. Опишем данный метод:
    public static function error($error){
        require_once "views/errors/$error.php";
    }

21. В папке views создадим папку errors, а в ней - страницу ошибки 404.php

22. Создадим новый класс Page в папке Services - он нужен для подгрузки отдельных компонентов страниц (аналог blade в Laravel). При создании нового php-класса пространство имён прописывается автоматически (спасибо autoload). У этого класса будет метод part(), кот. и отвечает за загрузку нужного компонента:
<?php
namespace App\Services;
class Page
{
    public static function part($part_name)
    {
        require_once "views/components/$part_name.php";
    }
}

23. Создадим структуру страницы home.php, а так же вызовем методы part() для добавления навбара и хедера:

<?php
use App\Services\Page;
?>

<!doctype html>
<html lang="en">
<?php
Page::part('head');
?>
<body>
<?php
Page::part('navbar');
?>
<div class="container mt-4">
    <div class="jumbotron">
        <h1 class="display-4">Hello, world!</h1>
        <p class="lead">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>
        <hr class="my-4">
        <p>It uses utility classes for typography and spacing to space content out within the larger container.</p>
        <a class="btn btn-primary btn-lg" href="/login" role="button">Sign In</a>
    </div>
</div>
</body>
</html>

24. В папке views/components создадим navbar.php и header.php.

25. В header.php пропишем подключение стилей бутстрапа:
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

26. Создадим страницы с формами - register.php и login.php.

27. За регистрацию и авторизацию будет отвечать класс Auth, создадим его в папке App/Controllers:
<?php
namespace App\Controllers;
class Auth
{

}

28. В классе Auth создадим метод register(), отвечающий за регистрацию. Он будет принимать два аргумента - данные ($data) и файлы ($files).
    public function register($data, $files)
    {
    }

29. В классе Router создадим метод post(), кот. будет отвечать инициализацию роута с отправкой данных. Метод принимает несколько аргументов:
$uri - адрес после домена и слэша
$class - класс, кот. необходимо использовать
$method - метод класса, кот. необходимо использовать
$formdata (bool) - есть ли данные, передаваемые через форму?
$files (bool) - есть ли передаваемые файлы?

Занесём все аргументы в виде массива в $list:
    public static function post($uri, $class, $method, $formdata = false, $files = false)
    {
        self::$list[] = [
            "uri" => $uri,
            "class" => $class,
            "method" => $method,
            "post" => true,
            "formdata" => $formdata,
            "files" => $files
        ];
    }

Мы так же добавили ключ "post", по кот. в дальнейшем будет определять, что идёт именно отправка данных.

30. Проинициализируем страницу с отправкой данных при регистрации, добавив в routes.php вызов метода post() у класса Router:
Router::post('/auth/register', Auth::class, 'register', true, true);

Из записи выше видно, что мы, перейдя по uri "/auth/register" передаём в метод post() класс Auth, метод у этого класса - register, а так же информацию о том, что идёт отправка данных с формы и передача файлов.

31. Перепишем цикл foreach из метода enable() класса Router. Метод отвечает непосредственно за запуск роутов.

        foreach (self::$list as $route) {
            if ($route["uri"] === '/' . $query) {
                if ($route["post"] && $_SERVER["REQUEST_METHOD"] === "POST") {
                    $action = new $route["class"];
                    $method = $route["method"];
                    $action->$method($_POST, $_FILES);
                    die();
                } else {
                    $page = $route['page'];
                    require_once "views/pages/$page.php";
                    die();
                }
            }
        }


После первого if мы добавили ещё один if, кот. проверяет 2 вещи:
- Передаются ли какие-либо данные? (за это отвечает ключ "post" из инициализированного роута) - $route["post"]
- Метод передачи данных - это post? - $_SERVER["REQUEST_METHOD"] === "POST"

Если всё действительно так, то мы создаём экземпляр переданного класса (в данном случае это Auth), название метода (кот. нужно вызвать у этого экземпляра класса) помещаем в переменную $method, после чего вызываем этот метод (с необходимыми параметрами) у только что созданного экземпляра класса. В данном случае мы вызываем метод register у класса Auth (т.к. именно всё это инициализировалось в routes.php) и передаём в него в качестве 1-го аргумента суперглобальный массив $_POST и в качестве 2-го аргумента суперглобальный массив $_FILES. Останавливаем выполнение кода командой die().

В методе register класса Auth проверим переданные данные, написав:

        echo 'Hello from Auth/register';
        print_r($data);
        print_r($files);

Рассмотрим подробнее то, что мы передали.
В $data попал массив $_POST (все данные из полей ввода).

Array
(
    [email] => rusheva1802@yandex.ru
    [user_name] => rusheva
    [full_name] => rusheva_full
    [password] => 123
    [confirm_password] => 123
)

В $files попал массив $_FILES с одним ключом - "user_avatar". Этот ключ взят из соответствующего input в форме регистрации.
Под этим ключом содержится массив с данными:

Array
(
    [user_avatar] => Array
        (
            [name] => zakat_derevo_ozero_130063_1920x1080.jpg
            [type] => image/jpeg
            [tmp_name] => C:\OpenServer\userdata\temp\upload\php3F3.tmp
            [error] => 0
            [size] => 106213
        )

)

- name - имя загруженного файла
- type - тип файла
- tmp_name - временное имя
- error - если 0, то загрузка прошла успешно
- size - размер в байтах.

32. Напишем реализацию метода register() в классе Auth. Для начала занесём все наши переданные данные в отдельные переменные:

        $email = $data["email"];
        $user_name = $data["user_name"];
        $full_name = $data["full_name"];
        $password = $data["password"];
        $password_confirm = $data["password_confirm"];

        $avatar = $files["user_avatar"];

Занесём в отдельные переменные имя и путь к файлу.

        $file_name = time() . '_' . $avatar["name"];
        $path = "uploads/avatars/" . $file_name;

Создаём папку uploads/avatars.

Далее перемещаем файл в эту папку и проверяем, всё ли прошло успешно:

        if (move_uploaded_file($avatar["tmp_name"], $path)) {

            // add user to db

        } else {
            // server error
        }

Если да, то нам нужно выполнить логику создания нового юзера в БД. Если нет - выдать серверную ошибку.

33. Для корректного добавления пользователей в БД необходимо подключить стороннюю библиотеку RedBean (защищает от SQL-инъекций, упрощает добавление в БД и т.д.). Скачиваем её с сайта: https://redbeanphp.com/index.php?p=/download

Файл rb.php помещаем в папку libs.

34. Теперь необходимо создать и настроить конфигурацию для библиотек и БД. Все конфиги будут лежать в папке config.
Создадим файл app.php, в нём укажем:
<?php
return [
    "libs" => [
        "rb" // redbean for db
    ]
];
Данный файл возвращает массив, в кот. пока один ключ - "libs", кот. указывает на то, какие библиотеки необходимо подключить. В данном случае это RedBean.

Создадим файл db.php, в нём укажем:
<?php
return [
    "enable" => true,
    "host" => "127.0.0.1",
    "port" => 3306,
    "username" => "root",
    "password" => "",
    "db" => "word_trainer"
];
Данный файл возвращает настройки подключения к БД.

35. В папке App/Services создадим новый класс App, кот. будет отвечать за стартовую настройку приложения. Данная настройка запускается в методе start():

    public static function start()
    {
        self::libs();
        self::db();
    }

Метод libs() отвечает за подключение сторонних библиотек, метод db() - за подключение БД.
Запустим метод start() в файле index.php:
App::start();
Не забываем указать namespace для корректного вызова класса App:
use App\Services\App;

36. Реализуем метод libs() класса App.
    public static function libs()
    {
        $config = require_once "config/app.php";
        foreach ($config["libs"] as $lib) {
            require_once "libs/" . $lib . ".php";
        }
    }
Тут мы видим, что идёт подключение сторонних файлов из папки libs в соответствии с конфигурацией в файле app.php.

37. Реализуем метод db() класса App.
    public static function db()
    {
        $config = require_once "config/db.php";
        if ($config["enable"]) {
            \R::setup('mysql:host=' . $config["host"] . ';port=' . $config["port"] . ';dbname=' . $config["db"] . '',
                $config["username"], $config["password"]);
            if(!\R::testConnection()){
                die('Error database connect');
            }
        }
    }

В данном методе мы подключаем класс R из RedBean, кот. осуществляет подключение к БД (метод setup()). Если по каким-то причинам подключения не произошло, выдаётся ошибка - за это отвечает метод testConnection().

38. Теперь, когда сторонние библиотеки подключены и соединение с БД установлено, мы можем добавить логику создания нового юзера в БД через метод register() класса Auth.
        if (move_uploaded_file($avatar["tmp_name"], $path)) {
            $user = \R::dispense('users');

            $user->email = $email;
            $user->username = $user_name;
            $user->full_name = $full_name;
            $user->avatar = "/" . $path;
            $user->password = password_hash($password, PASSWORD_DEFAULT);

            \R::store($user);

            Router::redirect('/login');

        } else {
            Router::error(500);
        }

RedBean сам создаёт нужную таблицу (users) и добавляет в неё нового юзера. Далее мы переадресовываем пользователя на страницу /login с помощью метода класса Router - redirect(). В противном случае возвращаем серверную ошибку с помощью Router::error(500).

39. Создаём метод redirect в классе Router.
    public static function redirect($uri)
    {
        header('Location: ' . $uri);
    }

40. Создаём страницу с 500-той ошибкой - 500.php в папке views/errors.

41. Делаем авторизацию. Для этого в классе Auth добавляем метод auth(), в кот. мы будем принимать только $data.
    public function auth($data)
    {
        $email = $data["email"];
        $password = $data["password"];
    }

42. С помощью средств RebBean ищем пользователя по имэйлу, если не находим, то выводим ошибку:
        $user = \R::findOne('users', 'email = ?', [$email]);

        if(!$user){
            die('User not found');
        }

43. Если же мы находим пользователя, то делаем проверку пароля

        if (password_verify($password, $user->password)) {
            session_start();
            $_SESSION["user"] = [
                "id" => $user->id,
                "full_name" => $user->full_name,
                "user_name" => $user->user_name,
                "group" => $user->group,
                "email" => $user->email,
                "avatar" => $user->avatar
            ];

            Router::redirect('/profile');
        } else {
            die('Incorrect password');
        }

44. Добавляем страницу profile в routes.php:
Router::page('/profile', 'profile');

45. Открываем сессию в index.php:
session_start();

46. В profile.php проверяем, существует ли пользователь в сессии. Если нет, редиректимся на логин.:
if (!$_SESSION["user"])
    \App\Services\Router::redirect('/login');

    Если да, то выводим инфу о пользователе:

        <div class="jumbotron">
            <h1 class="display-4">Hello, <?= $_SESSION["user"]["full_name"] ?> </h1>
            <img src="<?= $_SESSION["user"]["avatar"] ?>" height="300px" alt="">
        </div>

47. Настраиваем форму в login.php:

    <form class="mt-4" action="/auth/login" method="post">
        <div class="mb-3">
            <label for="email" class="form-label">Email address</label>
            <input type="email" class="form-control" name="email" id="email">
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" class="form-control" name="password" id="password">
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>

48. В файле routes.php создаём роут для авторизации (без передачи файлов):
Router::post('/auth/login', Auth::class, 'login', true);

49. В navbar.php нам нужно убирать кнопки логина и регистрации, а также добавлять ссылки на профиль и выход, если сессия существует. Для этого пишем:
            <div class="d-flex">
                <?php
                if (!$_SESSION["user"]) {
                    ?>
                    <a class="nav-link active" aria-current="page" href="/login">Login</a>
                    <a class="nav-link active" aria-current="page" href="/register">Register</a>
                    <?php
                } else {
                    ?>
                    <a class="nav-link active" aria-current="page" href="/profile">Profile</a>
                    <a class="nav-link active" aria-current="page" href="/logout">Logout</a>
                    <?php
                }
                ?>
            </div>

50. В login.php и register.php добавляет проверку - если сессия открыта, то редиректимся на profile.
if ($_SESSION["user"])
    \App\Services\Router::redirect('/profile');

51. В routes.php добавляем новый роут для логаута:
Router::post('/auth/logout', Auth::class, 'logout');

52. В navbar.php делаем логаут через кнопку в форме:
                    <form action="/auth/logout" method="post">
                        <button type="submit" class="btn btn-danger">Logout</button>
                    </form>









